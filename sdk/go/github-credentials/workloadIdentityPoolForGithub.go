// Code generated by Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package githubcredentials

import (
	"context"
	"reflect"

	iam "github.com/pulumi/pulumi-google-native/sdk/go/google/iam/v1"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type WorkloadIdentityPoolForGithub struct {
	pulumi.ResourceState

	// The identity pool resource.
	IdentityPool iam.WorkloadIdentityPoolOutput `pulumi:"identityPool"`
}

// NewWorkloadIdentityPoolForGithub registers a new resource with the given unique name, arguments, and options.
func NewWorkloadIdentityPoolForGithub(ctx *pulumi.Context,
	name string, args *WorkloadIdentityPoolForGithubArgs, opts ...pulumi.ResourceOption) (*WorkloadIdentityPoolForGithub, error) {
	if args == nil {
		args = &WorkloadIdentityPoolForGithubArgs{}
	}

	var resource WorkloadIdentityPoolForGithub
	err := ctx.RegisterRemoteComponentResource("github-credentials:index:WorkloadIdentityPoolForGithub", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

type workloadIdentityPoolForGithubArgs struct {
	// The name of the identity pool.
	IdentityPoolName *string `pulumi:"identityPoolName"`
}

// The set of arguments for constructing a WorkloadIdentityPoolForGithub resource.
type WorkloadIdentityPoolForGithubArgs struct {
	// The name of the identity pool.
	IdentityPoolName pulumi.StringPtrInput
}

func (WorkloadIdentityPoolForGithubArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*workloadIdentityPoolForGithubArgs)(nil)).Elem()
}

type WorkloadIdentityPoolForGithubInput interface {
	pulumi.Input

	ToWorkloadIdentityPoolForGithubOutput() WorkloadIdentityPoolForGithubOutput
	ToWorkloadIdentityPoolForGithubOutputWithContext(ctx context.Context) WorkloadIdentityPoolForGithubOutput
}

func (*WorkloadIdentityPoolForGithub) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkloadIdentityPoolForGithub)(nil)).Elem()
}

func (i *WorkloadIdentityPoolForGithub) ToWorkloadIdentityPoolForGithubOutput() WorkloadIdentityPoolForGithubOutput {
	return i.ToWorkloadIdentityPoolForGithubOutputWithContext(context.Background())
}

func (i *WorkloadIdentityPoolForGithub) ToWorkloadIdentityPoolForGithubOutputWithContext(ctx context.Context) WorkloadIdentityPoolForGithubOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkloadIdentityPoolForGithubOutput)
}

// WorkloadIdentityPoolForGithubArrayInput is an input type that accepts WorkloadIdentityPoolForGithubArray and WorkloadIdentityPoolForGithubArrayOutput values.
// You can construct a concrete instance of `WorkloadIdentityPoolForGithubArrayInput` via:
//
//	WorkloadIdentityPoolForGithubArray{ WorkloadIdentityPoolForGithubArgs{...} }
type WorkloadIdentityPoolForGithubArrayInput interface {
	pulumi.Input

	ToWorkloadIdentityPoolForGithubArrayOutput() WorkloadIdentityPoolForGithubArrayOutput
	ToWorkloadIdentityPoolForGithubArrayOutputWithContext(context.Context) WorkloadIdentityPoolForGithubArrayOutput
}

type WorkloadIdentityPoolForGithubArray []WorkloadIdentityPoolForGithubInput

func (WorkloadIdentityPoolForGithubArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkloadIdentityPoolForGithub)(nil)).Elem()
}

func (i WorkloadIdentityPoolForGithubArray) ToWorkloadIdentityPoolForGithubArrayOutput() WorkloadIdentityPoolForGithubArrayOutput {
	return i.ToWorkloadIdentityPoolForGithubArrayOutputWithContext(context.Background())
}

func (i WorkloadIdentityPoolForGithubArray) ToWorkloadIdentityPoolForGithubArrayOutputWithContext(ctx context.Context) WorkloadIdentityPoolForGithubArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkloadIdentityPoolForGithubArrayOutput)
}

// WorkloadIdentityPoolForGithubMapInput is an input type that accepts WorkloadIdentityPoolForGithubMap and WorkloadIdentityPoolForGithubMapOutput values.
// You can construct a concrete instance of `WorkloadIdentityPoolForGithubMapInput` via:
//
//	WorkloadIdentityPoolForGithubMap{ "key": WorkloadIdentityPoolForGithubArgs{...} }
type WorkloadIdentityPoolForGithubMapInput interface {
	pulumi.Input

	ToWorkloadIdentityPoolForGithubMapOutput() WorkloadIdentityPoolForGithubMapOutput
	ToWorkloadIdentityPoolForGithubMapOutputWithContext(context.Context) WorkloadIdentityPoolForGithubMapOutput
}

type WorkloadIdentityPoolForGithubMap map[string]WorkloadIdentityPoolForGithubInput

func (WorkloadIdentityPoolForGithubMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkloadIdentityPoolForGithub)(nil)).Elem()
}

func (i WorkloadIdentityPoolForGithubMap) ToWorkloadIdentityPoolForGithubMapOutput() WorkloadIdentityPoolForGithubMapOutput {
	return i.ToWorkloadIdentityPoolForGithubMapOutputWithContext(context.Background())
}

func (i WorkloadIdentityPoolForGithubMap) ToWorkloadIdentityPoolForGithubMapOutputWithContext(ctx context.Context) WorkloadIdentityPoolForGithubMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkloadIdentityPoolForGithubMapOutput)
}

type WorkloadIdentityPoolForGithubOutput struct{ *pulumi.OutputState }

func (WorkloadIdentityPoolForGithubOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkloadIdentityPoolForGithub)(nil)).Elem()
}

func (o WorkloadIdentityPoolForGithubOutput) ToWorkloadIdentityPoolForGithubOutput() WorkloadIdentityPoolForGithubOutput {
	return o
}

func (o WorkloadIdentityPoolForGithubOutput) ToWorkloadIdentityPoolForGithubOutputWithContext(ctx context.Context) WorkloadIdentityPoolForGithubOutput {
	return o
}

// The identity pool resource.
func (o WorkloadIdentityPoolForGithubOutput) IdentityPool() iam.WorkloadIdentityPoolOutput {
	return o.ApplyT(func(v *WorkloadIdentityPoolForGithub) iam.WorkloadIdentityPoolOutput { return v.IdentityPool }).(iam.WorkloadIdentityPoolOutput)
}

type WorkloadIdentityPoolForGithubArrayOutput struct{ *pulumi.OutputState }

func (WorkloadIdentityPoolForGithubArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkloadIdentityPoolForGithub)(nil)).Elem()
}

func (o WorkloadIdentityPoolForGithubArrayOutput) ToWorkloadIdentityPoolForGithubArrayOutput() WorkloadIdentityPoolForGithubArrayOutput {
	return o
}

func (o WorkloadIdentityPoolForGithubArrayOutput) ToWorkloadIdentityPoolForGithubArrayOutputWithContext(ctx context.Context) WorkloadIdentityPoolForGithubArrayOutput {
	return o
}

func (o WorkloadIdentityPoolForGithubArrayOutput) Index(i pulumi.IntInput) WorkloadIdentityPoolForGithubOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WorkloadIdentityPoolForGithub {
		return vs[0].([]*WorkloadIdentityPoolForGithub)[vs[1].(int)]
	}).(WorkloadIdentityPoolForGithubOutput)
}

type WorkloadIdentityPoolForGithubMapOutput struct{ *pulumi.OutputState }

func (WorkloadIdentityPoolForGithubMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkloadIdentityPoolForGithub)(nil)).Elem()
}

func (o WorkloadIdentityPoolForGithubMapOutput) ToWorkloadIdentityPoolForGithubMapOutput() WorkloadIdentityPoolForGithubMapOutput {
	return o
}

func (o WorkloadIdentityPoolForGithubMapOutput) ToWorkloadIdentityPoolForGithubMapOutputWithContext(ctx context.Context) WorkloadIdentityPoolForGithubMapOutput {
	return o
}

func (o WorkloadIdentityPoolForGithubMapOutput) MapIndex(k pulumi.StringInput) WorkloadIdentityPoolForGithubOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WorkloadIdentityPoolForGithub {
		return vs[0].(map[string]*WorkloadIdentityPoolForGithub)[vs[1].(string)]
	}).(WorkloadIdentityPoolForGithubOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WorkloadIdentityPoolForGithubInput)(nil)).Elem(), &WorkloadIdentityPoolForGithub{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkloadIdentityPoolForGithubArrayInput)(nil)).Elem(), WorkloadIdentityPoolForGithubArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkloadIdentityPoolForGithubMapInput)(nil)).Elem(), WorkloadIdentityPoolForGithubMap{})
	pulumi.RegisterOutputType(WorkloadIdentityPoolForGithubOutput{})
	pulumi.RegisterOutputType(WorkloadIdentityPoolForGithubArrayOutput{})
	pulumi.RegisterOutputType(WorkloadIdentityPoolForGithubMapOutput{})
}
